
throwaway_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800239c  0800239c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023cc  080023cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023cc  080023cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023cc  080023cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023cc  080023cc  000123cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023d0  080023d0  000123d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000000c  080023e0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080023e0  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1d2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e5e  00000000  00000000  0002c206  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bf8  00000000  00000000  0002e068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af0  00000000  00000000  0002ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015d69  00000000  00000000  0002f750  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a868  00000000  00000000  000454b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007921c  00000000  00000000  0004fd21  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c8f3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  000c8fb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002384 	.word	0x08002384

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002384 	.word	0x08002384

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fbd4 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f81a 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f966 	bl	80004fc <MX_GPIO_Init>
  MX_I2C2_Init();
 8000230:	f000 f87c 	bl	800032c <MX_I2C2_Init>
  MX_SPI2_Init();
 8000234:	f000 f8ba 	bl	80003ac <MX_SPI2_Init>
  MX_TSC_Init();
 8000238:	f000 f8f6 	bl	8000428 <MX_TSC_Init>
  MX_USB_PCD_Init();
 800023c:	f000 f938 	bl	80004b0 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000240:	2380      	movs	r3, #128	; 0x80
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	4a05      	ldr	r2, [pc, #20]	; (800025c <main+0x3c>)
 8000246:	0019      	movs	r1, r3
 8000248:	0010      	movs	r0, r2
 800024a:	f000 fe90 	bl	8000f6e <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800024e:	23fa      	movs	r3, #250	; 0xfa
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	0018      	movs	r0, r3
 8000254:	f000 fc20 	bl	8000a98 <HAL_Delay>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000258:	e7f2      	b.n	8000240 <main+0x20>
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	48000800 	.word	0x48000800

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b099      	sub	sp, #100	; 0x64
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	242c      	movs	r4, #44	; 0x2c
 8000268:	193b      	adds	r3, r7, r4
 800026a:	0018      	movs	r0, r3
 800026c:	2334      	movs	r3, #52	; 0x34
 800026e:	001a      	movs	r2, r3
 8000270:	2100      	movs	r1, #0
 8000272:	f002 f87f 	bl	8002374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000276:	231c      	movs	r3, #28
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	0018      	movs	r0, r3
 800027c:	2310      	movs	r3, #16
 800027e:	001a      	movs	r2, r3
 8000280:	2100      	movs	r1, #0
 8000282:	f002 f877 	bl	8002374 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000286:	003b      	movs	r3, r7
 8000288:	0018      	movs	r0, r3
 800028a:	231c      	movs	r3, #28
 800028c:	001a      	movs	r2, r3
 800028e:	2100      	movs	r1, #0
 8000290:	f002 f870 	bl	8002374 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000294:	0021      	movs	r1, r4
 8000296:	187b      	adds	r3, r7, r1
 8000298:	2222      	movs	r2, #34	; 0x22
 800029a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	187b      	adds	r3, r7, r1
 800029e:	2201      	movs	r2, #1
 80002a0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80002a2:	187b      	adds	r3, r7, r1
 80002a4:	2201      	movs	r2, #1
 80002a6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a8:	187b      	adds	r3, r7, r1
 80002aa:	2210      	movs	r2, #16
 80002ac:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2202      	movs	r2, #2
 80002b2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2280      	movs	r2, #128	; 0x80
 80002b8:	0212      	lsls	r2, r2, #8
 80002ba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2280      	movs	r2, #128	; 0x80
 80002c0:	0352      	lsls	r2, r2, #13
 80002c2:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2200      	movs	r2, #0
 80002c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f8a5 	bl	800141c <HAL_RCC_OscConfig>
 80002d2:	1e03      	subs	r3, r0, #0
 80002d4:	d001      	beq.n	80002da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80002d6:	f000 f9ad 	bl	8000634 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002da:	211c      	movs	r1, #28
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2101      	movs	r1, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f001 fc15 	bl	8001b28 <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000302:	f000 f997 	bl	8000634 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000306:	003b      	movs	r3, r7
 8000308:	2280      	movs	r2, #128	; 0x80
 800030a:	0292      	lsls	r2, r2, #10
 800030c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000314:	003b      	movs	r3, r7
 8000316:	0018      	movs	r0, r3
 8000318:	f001 fd5e 	bl	8001dd8 <HAL_RCCEx_PeriphCLKConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000320:	f000 f988 	bl	8000634 <Error_Handler>
  }
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	b019      	add	sp, #100	; 0x64
 800032a:	bd90      	pop	{r4, r7, pc}

0800032c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000330:	4b1b      	ldr	r3, [pc, #108]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000332:	4a1c      	ldr	r2, [pc, #112]	; (80003a4 <MX_I2C2_Init+0x78>)
 8000334:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000336:	4b1a      	ldr	r3, [pc, #104]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000338:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <MX_I2C2_Init+0x7c>)
 800033a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800033c:	4b18      	ldr	r3, [pc, #96]	; (80003a0 <MX_I2C2_Init+0x74>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000342:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000344:	2201      	movs	r2, #1
 8000346:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <MX_I2C2_Init+0x74>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800034e:	4b14      	ldr	r3, [pc, #80]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_I2C2_Init+0x74>)
 800035c:	2200      	movs	r2, #0
 800035e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000362:	2200      	movs	r2, #0
 8000364:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fe1b 	bl	8000fa4 <HAL_I2C_Init>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000372:	f000 f95f 	bl	8000634 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000376:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_I2C2_Init+0x74>)
 8000378:	2100      	movs	r1, #0
 800037a:	0018      	movs	r0, r3
 800037c:	f000 fea8 	bl	80010d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000384:	f000 f956 	bl	8000634 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000388:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <MX_I2C2_Init+0x74>)
 800038a:	2100      	movs	r1, #0
 800038c:	0018      	movs	r0, r3
 800038e:	f000 feeb 	bl	8001168 <HAL_I2CEx_ConfigDigitalFilter>
 8000392:	1e03      	subs	r3, r0, #0
 8000394:	d001      	beq.n	800039a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000396:	f000 f94d 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	2000008c 	.word	0x2000008c
 80003a4:	40005800 	.word	0x40005800
 80003a8:	20303e5d 	.word	0x20303e5d

080003ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_SPI2_Init+0x74>)
 80003b2:	4a1c      	ldr	r2, [pc, #112]	; (8000424 <MX_SPI2_Init+0x78>)
 80003b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_SPI2_Init+0x74>)
 80003b8:	2282      	movs	r2, #130	; 0x82
 80003ba:	0052      	lsls	r2, r2, #1
 80003bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003be:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_SPI2_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_SPI2_Init+0x74>)
 80003c6:	22c0      	movs	r2, #192	; 0xc0
 80003c8:	0092      	lsls	r2, r2, #2
 80003ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003cc:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_SPI2_Init+0x74>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d2:	4b13      	ldr	r3, [pc, #76]	; (8000420 <MX_SPI2_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003d8:	4b11      	ldr	r3, [pc, #68]	; (8000420 <MX_SPI2_Init+0x74>)
 80003da:	2280      	movs	r2, #128	; 0x80
 80003dc:	0092      	lsls	r2, r2, #2
 80003de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003e0:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_SPI2_Init+0x74>)
 80003e2:	2208      	movs	r2, #8
 80003e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e6:	4b0e      	ldr	r3, [pc, #56]	; (8000420 <MX_SPI2_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ec:	4b0c      	ldr	r3, [pc, #48]	; (8000420 <MX_SPI2_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f2:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <MX_SPI2_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80003f8:	4b09      	ldr	r3, [pc, #36]	; (8000420 <MX_SPI2_Init+0x74>)
 80003fa:	2207      	movs	r2, #7
 80003fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003fe:	4b08      	ldr	r3, [pc, #32]	; (8000420 <MX_SPI2_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_SPI2_Init+0x74>)
 8000406:	2208      	movs	r2, #8
 8000408:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800040a:	4b05      	ldr	r3, [pc, #20]	; (8000420 <MX_SPI2_Init+0x74>)
 800040c:	0018      	movs	r0, r3
 800040e:	f001 fde3 	bl	8001fd8 <HAL_SPI_Init>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000416:	f000 f90d 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000028 	.word	0x20000028
 8000424:	40003800 	.word	0x40003800

08000428 <MX_TSC_Init>:
  * @brief TSC Initialization Function
  * @param None
  * @retval None
  */
static void MX_TSC_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSC_Init 1 */

  /* USER CODE END TSC_Init 1 */
  /** Configure the TSC peripheral
  */
  htsc.Instance = TSC;
 800042c:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <MX_TSC_Init+0x80>)
 800042e:	4a1f      	ldr	r2, [pc, #124]	; (80004ac <MX_TSC_Init+0x84>)
 8000430:	601a      	str	r2, [r3, #0]
  htsc.Init.CTPulseHighLength = TSC_CTPH_2CYCLES;
 8000432:	4b1d      	ldr	r3, [pc, #116]	; (80004a8 <MX_TSC_Init+0x80>)
 8000434:	2280      	movs	r2, #128	; 0x80
 8000436:	0552      	lsls	r2, r2, #21
 8000438:	605a      	str	r2, [r3, #4]
  htsc.Init.CTPulseLowLength = TSC_CTPL_2CYCLES;
 800043a:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <MX_TSC_Init+0x80>)
 800043c:	2280      	movs	r2, #128	; 0x80
 800043e:	0452      	lsls	r2, r2, #17
 8000440:	609a      	str	r2, [r3, #8]
  htsc.Init.SpreadSpectrum = DISABLE;
 8000442:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <MX_TSC_Init+0x80>)
 8000444:	2200      	movs	r2, #0
 8000446:	731a      	strb	r2, [r3, #12]
  htsc.Init.SpreadSpectrumDeviation = 1;
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <MX_TSC_Init+0x80>)
 800044a:	2201      	movs	r2, #1
 800044c:	611a      	str	r2, [r3, #16]
  htsc.Init.SpreadSpectrumPrescaler = TSC_SS_PRESC_DIV1;
 800044e:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <MX_TSC_Init+0x80>)
 8000450:	2200      	movs	r2, #0
 8000452:	615a      	str	r2, [r3, #20]
  htsc.Init.PulseGeneratorPrescaler = TSC_PG_PRESC_DIV4;
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <MX_TSC_Init+0x80>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	0192      	lsls	r2, r2, #6
 800045a:	619a      	str	r2, [r3, #24]
  htsc.Init.MaxCountValue = TSC_MCV_8191;
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <MX_TSC_Init+0x80>)
 800045e:	22a0      	movs	r2, #160	; 0xa0
 8000460:	61da      	str	r2, [r3, #28]
  htsc.Init.IODefaultMode = TSC_IODEF_OUT_PP_LOW;
 8000462:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <MX_TSC_Init+0x80>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  htsc.Init.SynchroPinPolarity = TSC_SYNC_POLARITY_FALLING;
 8000468:	4b0f      	ldr	r3, [pc, #60]	; (80004a8 <MX_TSC_Init+0x80>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  htsc.Init.AcquisitionMode = TSC_ACQ_MODE_NORMAL;
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <MX_TSC_Init+0x80>)
 8000470:	2200      	movs	r2, #0
 8000472:	629a      	str	r2, [r3, #40]	; 0x28
  htsc.Init.MaxCountInterrupt = DISABLE;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <MX_TSC_Init+0x80>)
 8000476:	222c      	movs	r2, #44	; 0x2c
 8000478:	2100      	movs	r1, #0
 800047a:	5499      	strb	r1, [r3, r2]
  htsc.Init.ChannelIOs = TSC_GROUP1_IO3|TSC_GROUP2_IO3|TSC_GROUP3_IO2;
 800047c:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <MX_TSC_Init+0x80>)
 800047e:	2291      	movs	r2, #145	; 0x91
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	631a      	str	r2, [r3, #48]	; 0x30
  htsc.Init.ShieldIOs = 0;
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <MX_TSC_Init+0x80>)
 8000486:	2200      	movs	r2, #0
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
  htsc.Init.SamplingIOs = TSC_GROUP1_IO4|TSC_GROUP2_IO4|TSC_GROUP3_IO3;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <MX_TSC_Init+0x80>)
 800048c:	2291      	movs	r2, #145	; 0x91
 800048e:	00d2      	lsls	r2, r2, #3
 8000490:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_TSC_Init(&htsc) != HAL_OK)
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <MX_TSC_Init+0x80>)
 8000494:	0018      	movs	r0, r3
 8000496:	f001 fe39 	bl	800210c <HAL_TSC_Init>
 800049a:	1e03      	subs	r3, r0, #0
 800049c:	d001      	beq.n	80004a2 <MX_TSC_Init+0x7a>
  {
    Error_Handler();
 800049e:	f000 f8c9 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN TSC_Init 2 */

  /* USER CODE END TSC_Init 2 */

}
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	2000034c 	.word	0x2000034c
 80004ac:	40024000 	.word	0x40024000

080004b0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004b6:	4a10      	ldr	r2, [pc, #64]	; (80004f8 <MX_USB_PCD_Init+0x48>)
 80004b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004bc:	2208      	movs	r2, #8
 80004be:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004c8:	2202      	movs	r2, #2
 80004ca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004da:	2200      	movs	r2, #0
 80004dc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80004de:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <MX_USB_PCD_Init+0x44>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 fe8d 	bl	8001200 <HAL_PCD_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 80004ea:	f000 f8a3 	bl	8000634 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000d8 	.word	0x200000d8
 80004f8:	40005c00 	.word	0x40005c00

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b590      	push	{r4, r7, lr}
 80004fe:	b089      	sub	sp, #36	; 0x24
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	240c      	movs	r4, #12
 8000504:	193b      	adds	r3, r7, r4
 8000506:	0018      	movs	r0, r3
 8000508:	2314      	movs	r3, #20
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f001 ff31 	bl	8002374 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b43      	ldr	r3, [pc, #268]	; (8000620 <MX_GPIO_Init+0x124>)
 8000514:	695a      	ldr	r2, [r3, #20]
 8000516:	4b42      	ldr	r3, [pc, #264]	; (8000620 <MX_GPIO_Init+0x124>)
 8000518:	2180      	movs	r1, #128	; 0x80
 800051a:	0309      	lsls	r1, r1, #12
 800051c:	430a      	orrs	r2, r1
 800051e:	615a      	str	r2, [r3, #20]
 8000520:	4b3f      	ldr	r3, [pc, #252]	; (8000620 <MX_GPIO_Init+0x124>)
 8000522:	695a      	ldr	r2, [r3, #20]
 8000524:	2380      	movs	r3, #128	; 0x80
 8000526:	031b      	lsls	r3, r3, #12
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052e:	4b3c      	ldr	r3, [pc, #240]	; (8000620 <MX_GPIO_Init+0x124>)
 8000530:	695a      	ldr	r2, [r3, #20]
 8000532:	4b3b      	ldr	r3, [pc, #236]	; (8000620 <MX_GPIO_Init+0x124>)
 8000534:	2180      	movs	r1, #128	; 0x80
 8000536:	0289      	lsls	r1, r1, #10
 8000538:	430a      	orrs	r2, r1
 800053a:	615a      	str	r2, [r3, #20]
 800053c:	4b38      	ldr	r3, [pc, #224]	; (8000620 <MX_GPIO_Init+0x124>)
 800053e:	695a      	ldr	r2, [r3, #20]
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	029b      	lsls	r3, r3, #10
 8000544:	4013      	ands	r3, r2
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054a:	4b35      	ldr	r3, [pc, #212]	; (8000620 <MX_GPIO_Init+0x124>)
 800054c:	695a      	ldr	r2, [r3, #20]
 800054e:	4b34      	ldr	r3, [pc, #208]	; (8000620 <MX_GPIO_Init+0x124>)
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	02c9      	lsls	r1, r1, #11
 8000554:	430a      	orrs	r2, r1
 8000556:	615a      	str	r2, [r3, #20]
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <MX_GPIO_Init+0x124>)
 800055a:	695a      	ldr	r2, [r3, #20]
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	02db      	lsls	r3, r3, #11
 8000560:	4013      	ands	r3, r2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000566:	492f      	ldr	r1, [pc, #188]	; (8000624 <MX_GPIO_Init+0x128>)
 8000568:	4b2f      	ldr	r3, [pc, #188]	; (8000628 <MX_GPIO_Init+0x12c>)
 800056a:	2200      	movs	r2, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f000 fce1 	bl	8000f34 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Test_Pin_1_GPIO_Port, Test_Pin_1_Pin, GPIO_PIN_RESET);
 8000572:	2380      	movs	r3, #128	; 0x80
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	482d      	ldr	r0, [pc, #180]	; (800062c <MX_GPIO_Init+0x130>)
 8000578:	2200      	movs	r2, #0
 800057a:	0019      	movs	r1, r3
 800057c:	f000 fcda 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin EXT_RESET_Pin LD3_Pin LD6_Pin
                           LD4_Pin LD5_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|EXT_RESET_Pin|LD3_Pin|LD6_Pin
 8000580:	0021      	movs	r1, r4
 8000582:	187b      	adds	r3, r7, r1
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <MX_GPIO_Init+0x128>)
 8000586:	601a      	str	r2, [r3, #0]
                          |LD4_Pin|LD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2201      	movs	r2, #1
 800058c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2200      	movs	r2, #0
 8000598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	000c      	movs	r4, r1
 800059c:	187b      	adds	r3, r7, r1
 800059e:	4a22      	ldr	r2, [pc, #136]	; (8000628 <MX_GPIO_Init+0x12c>)
 80005a0:	0019      	movs	r1, r3
 80005a2:	0010      	movs	r0, r2
 80005a4:	f000 fb4e 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin;
 80005a8:	0021      	movs	r1, r4
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2206      	movs	r2, #6
 80005ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	4a1f      	ldr	r2, [pc, #124]	; (8000630 <MX_GPIO_Init+0x134>)
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005bc:	000c      	movs	r4, r1
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	4a19      	ldr	r2, [pc, #100]	; (8000628 <MX_GPIO_Init+0x12c>)
 80005c2:	0019      	movs	r1, r3
 80005c4:	0010      	movs	r0, r2
 80005c6:	f000 fb3d 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2201      	movs	r2, #1
 80005d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	4a16      	ldr	r2, [pc, #88]	; (8000630 <MX_GPIO_Init+0x134>)
 80005d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005de:	000c      	movs	r4, r1
 80005e0:	187a      	adds	r2, r7, r1
 80005e2:	2390      	movs	r3, #144	; 0x90
 80005e4:	05db      	lsls	r3, r3, #23
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f000 fb2b 	bl	8000c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : Test_Pin_1_Pin */
  GPIO_InitStruct.Pin = Test_Pin_1_Pin;
 80005ee:	0021      	movs	r1, r4
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	0092      	lsls	r2, r2, #2
 80005f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2201      	movs	r2, #1
 80005fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Test_Pin_1_GPIO_Port, &GPIO_InitStruct);
 800060a:	187b      	adds	r3, r7, r1
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <MX_GPIO_Init+0x130>)
 800060e:	0019      	movs	r1, r3
 8000610:	0010      	movs	r0, r2
 8000612:	f000 fb17 	bl	8000c44 <HAL_GPIO_Init>

}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	46bd      	mov	sp, r7
 800061a:	b009      	add	sp, #36	; 0x24
 800061c:	bd90      	pop	{r4, r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	40021000 	.word	0x40021000
 8000624:	000003e1 	.word	0x000003e1
 8000628:	48000800 	.word	0x48000800
 800062c:	48000400 	.word	0x48000400
 8000630:	10120000 	.word	0x10120000

08000634 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <HAL_MspInit+0x44>)
 8000648:	699a      	ldr	r2, [r3, #24]
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_MspInit+0x44>)
 800064c:	2101      	movs	r1, #1
 800064e:	430a      	orrs	r2, r1
 8000650:	619a      	str	r2, [r3, #24]
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <HAL_MspInit+0x44>)
 8000654:	699b      	ldr	r3, [r3, #24]
 8000656:	2201      	movs	r2, #1
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_MspInit+0x44>)
 8000660:	69da      	ldr	r2, [r3, #28]
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <HAL_MspInit+0x44>)
 8000664:	2180      	movs	r1, #128	; 0x80
 8000666:	0549      	lsls	r1, r1, #21
 8000668:	430a      	orrs	r2, r1
 800066a:	61da      	str	r2, [r3, #28]
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_MspInit+0x44>)
 800066e:	69da      	ldr	r2, [r3, #28]
 8000670:	2380      	movs	r3, #128	; 0x80
 8000672:	055b      	lsls	r3, r3, #21
 8000674:	4013      	ands	r3, r2
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	40021000 	.word	0x40021000

08000688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	2314      	movs	r3, #20
 8000692:	18fb      	adds	r3, r7, r3
 8000694:	0018      	movs	r0, r3
 8000696:	2314      	movs	r3, #20
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f001 fe6a 	bl	8002374 <memset>
  if(hi2c->Instance==I2C2)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1c      	ldr	r2, [pc, #112]	; (8000718 <HAL_I2C_MspInit+0x90>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d132      	bne.n	8000710 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b1c      	ldr	r3, [pc, #112]	; (800071c <HAL_I2C_MspInit+0x94>)
 80006ac:	695a      	ldr	r2, [r3, #20]
 80006ae:	4b1b      	ldr	r3, [pc, #108]	; (800071c <HAL_I2C_MspInit+0x94>)
 80006b0:	2180      	movs	r1, #128	; 0x80
 80006b2:	02c9      	lsls	r1, r1, #11
 80006b4:	430a      	orrs	r2, r1
 80006b6:	615a      	str	r2, [r3, #20]
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_I2C_MspInit+0x94>)
 80006ba:	695a      	ldr	r2, [r3, #20]
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	02db      	lsls	r3, r3, #11
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 80006c6:	2114      	movs	r1, #20
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	22c0      	movs	r2, #192	; 0xc0
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2212      	movs	r2, #18
 80006d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2203      	movs	r2, #3
 80006e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2201      	movs	r2, #1
 80006e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <HAL_I2C_MspInit+0x98>)
 80006ec:	0019      	movs	r1, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	f000 faa8 	bl	8000c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <HAL_I2C_MspInit+0x94>)
 80006f6:	69da      	ldr	r2, [r3, #28]
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <HAL_I2C_MspInit+0x94>)
 80006fa:	2180      	movs	r1, #128	; 0x80
 80006fc:	03c9      	lsls	r1, r1, #15
 80006fe:	430a      	orrs	r2, r1
 8000700:	61da      	str	r2, [r3, #28]
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_I2C_MspInit+0x94>)
 8000704:	69da      	ldr	r2, [r3, #28]
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	03db      	lsls	r3, r3, #15
 800070a:	4013      	ands	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000710:	46c0      	nop			; (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b00a      	add	sp, #40	; 0x28
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40005800 	.word	0x40005800
 800071c:	40021000 	.word	0x40021000
 8000720:	48000400 	.word	0x48000400

08000724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	2314      	movs	r3, #20
 800072e:	18fb      	adds	r3, r7, r3
 8000730:	0018      	movs	r0, r3
 8000732:	2314      	movs	r3, #20
 8000734:	001a      	movs	r2, r3
 8000736:	2100      	movs	r1, #0
 8000738:	f001 fe1c 	bl	8002374 <memset>
  if(hspi->Instance==SPI2)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <HAL_SPI_MspInit+0x90>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d132      	bne.n	80007ac <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000746:	4b1c      	ldr	r3, [pc, #112]	; (80007b8 <HAL_SPI_MspInit+0x94>)
 8000748:	69da      	ldr	r2, [r3, #28]
 800074a:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <HAL_SPI_MspInit+0x94>)
 800074c:	2180      	movs	r1, #128	; 0x80
 800074e:	01c9      	lsls	r1, r1, #7
 8000750:	430a      	orrs	r2, r1
 8000752:	61da      	str	r2, [r3, #28]
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <HAL_SPI_MspInit+0x94>)
 8000756:	69da      	ldr	r2, [r3, #28]
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	01db      	lsls	r3, r3, #7
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	4b15      	ldr	r3, [pc, #84]	; (80007b8 <HAL_SPI_MspInit+0x94>)
 8000764:	695a      	ldr	r2, [r3, #20]
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_SPI_MspInit+0x94>)
 8000768:	2180      	movs	r1, #128	; 0x80
 800076a:	02c9      	lsls	r1, r1, #11
 800076c:	430a      	orrs	r2, r1
 800076e:	615a      	str	r2, [r3, #20]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_SPI_MspInit+0x94>)
 8000772:	695a      	ldr	r2, [r3, #20]
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	02db      	lsls	r3, r3, #11
 8000778:	4013      	ands	r3, r2
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|SPI2_MISO_Pin|SPI2_MOSI_Pin;
 800077e:	2114      	movs	r1, #20
 8000780:	187b      	adds	r3, r7, r1
 8000782:	22e0      	movs	r2, #224	; 0xe0
 8000784:	0212      	lsls	r2, r2, #8
 8000786:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2203      	movs	r2, #3
 8000798:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_SPI_MspInit+0x98>)
 80007a4:	0019      	movs	r1, r3
 80007a6:	0010      	movs	r0, r2
 80007a8:	f000 fa4c 	bl	8000c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b00a      	add	sp, #40	; 0x28
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40003800 	.word	0x40003800
 80007b8:	40021000 	.word	0x40021000
 80007bc:	48000400 	.word	0x48000400

080007c0 <HAL_TSC_MspInit>:
* This function configures the hardware resources used in this example
* @param htsc: TSC handle pointer
* @retval None
*/
void HAL_TSC_MspInit(TSC_HandleTypeDef* htsc)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	2314      	movs	r3, #20
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f001 fdce 	bl	8002374 <memset>
  if(htsc->Instance==TSC)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a45      	ldr	r2, [pc, #276]	; (80008f4 <HAL_TSC_MspInit+0x134>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d000      	beq.n	80007e4 <HAL_TSC_MspInit+0x24>
 80007e2:	e083      	b.n	80008ec <HAL_TSC_MspInit+0x12c>
  {
  /* USER CODE BEGIN TSC_MspInit 0 */

  /* USER CODE END TSC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TSC_CLK_ENABLE();
 80007e4:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	4b43      	ldr	r3, [pc, #268]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	0449      	lsls	r1, r1, #17
 80007ee:	430a      	orrs	r2, r1
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	4b41      	ldr	r3, [pc, #260]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 80007f4:	695a      	ldr	r2, [r3, #20]
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	045b      	lsls	r3, r3, #17
 80007fa:	4013      	ands	r3, r2
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b3d      	ldr	r3, [pc, #244]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 8000802:	695a      	ldr	r2, [r3, #20]
 8000804:	4b3c      	ldr	r3, [pc, #240]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	0289      	lsls	r1, r1, #10
 800080a:	430a      	orrs	r2, r1
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	4b3a      	ldr	r3, [pc, #232]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 8000810:	695a      	ldr	r2, [r3, #20]
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	029b      	lsls	r3, r3, #10
 8000816:	4013      	ands	r3, r2
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800081c:	4b36      	ldr	r3, [pc, #216]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 800081e:	695a      	ldr	r2, [r3, #20]
 8000820:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 8000822:	2180      	movs	r1, #128	; 0x80
 8000824:	02c9      	lsls	r1, r1, #11
 8000826:	430a      	orrs	r2, r1
 8000828:	615a      	str	r2, [r3, #20]
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <HAL_TSC_MspInit+0x138>)
 800082c:	695a      	ldr	r2, [r3, #20]
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	02db      	lsls	r3, r3, #11
 8000832:	4013      	ands	r3, r2
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TSC_G2_IO3
    PA7     ------> TSC_G2_IO4
    PB0     ------> TSC_G3_IO2
    PB1     ------> TSC_G3_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8000838:	2414      	movs	r4, #20
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2244      	movs	r2, #68	; 0x44
 800083e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2202      	movs	r2, #2
 8000844:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	193b      	adds	r3, r7, r4
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2203      	movs	r2, #3
 8000856:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000858:	193a      	adds	r2, r7, r4
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f000 f9ef 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7;
 8000866:	193b      	adds	r3, r7, r4
 8000868:	2288      	movs	r2, #136	; 0x88
 800086a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800086c:	193b      	adds	r3, r7, r4
 800086e:	2212      	movs	r2, #18
 8000870:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2200      	movs	r2, #0
 800087c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2203      	movs	r2, #3
 8000882:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	193a      	adds	r2, r7, r4
 8000886:	2390      	movs	r3, #144	; 0x90
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 f9d9 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000892:	0021      	movs	r1, r4
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2201      	movs	r2, #1
 8000898:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2202      	movs	r2, #2
 800089e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2203      	movs	r2, #3
 80008b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	000c      	movs	r4, r1
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	4a11      	ldr	r2, [pc, #68]	; (80008fc <HAL_TSC_MspInit+0x13c>)
 80008b8:	0019      	movs	r1, r3
 80008ba:	0010      	movs	r0, r2
 80008bc:	f000 f9c2 	bl	8000c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2202      	movs	r2, #2
 80008c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2212      	movs	r2, #18
 80008cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TSC;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2203      	movs	r2, #3
 80008de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <HAL_TSC_MspInit+0x13c>)
 80008e4:	0019      	movs	r1, r3
 80008e6:	0010      	movs	r0, r2
 80008e8:	f000 f9ac 	bl	8000c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TSC_MspInit 1 */

  /* USER CODE END TSC_MspInit 1 */
  }

}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b00b      	add	sp, #44	; 0x2c
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	40024000 	.word	0x40024000
 80008f8:	40021000 	.word	0x40021000
 80008fc:	48000400 	.word	0x48000400

08000900 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if(hpcd->Instance==USB)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <HAL_PCD_MspInit+0x38>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d10d      	bne.n	800092e <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <HAL_PCD_MspInit+0x3c>)
 8000914:	69da      	ldr	r2, [r3, #28]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_PCD_MspInit+0x3c>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	0409      	lsls	r1, r1, #16
 800091c:	430a      	orrs	r2, r1
 800091e:	61da      	str	r2, [r3, #28]
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_PCD_MspInit+0x3c>)
 8000922:	69da      	ldr	r2, [r3, #28]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	041b      	lsls	r3, r3, #16
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	b004      	add	sp, #16
 8000934:	bd80      	pop	{r7, pc}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	40005c00 	.word	0x40005c00
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000968:	f000 f87a 	bl	8000a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800097e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009a6:	f7ff ffe4 	bl	8000972 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009aa:	f001 fcbf 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ae:	f7ff fc37 	bl	8000220 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   r0, =_estack
 80009b4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	080023d4 	.word	0x080023d4
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	20000394 	.word	0x20000394

080009cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_COMP_IRQHandler>
	...

080009d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d4:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <HAL_Init+0x24>)
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_Init+0x24>)
 80009da:	2110      	movs	r1, #16
 80009dc:	430a      	orrs	r2, r1
 80009de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f809 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e6:	f7ff fe2b 	bl	8000640 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40022000 	.word	0x40022000

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a02:	681c      	ldr	r4, [r3, #0]
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_InitTick+0x60>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	0019      	movs	r1, r3
 8000a0a:	23fa      	movs	r3, #250	; 0xfa
 8000a0c:	0098      	lsls	r0, r3, #2
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	0019      	movs	r1, r3
 8000a16:	0020      	movs	r0, r4
 8000a18:	f7ff fb76 	bl	8000108 <__udivsi3>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 f903 	bl	8000c2a <HAL_SYSTICK_Config>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e00f      	b.n	8000a4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2b03      	cmp	r3, #3
 8000a30:	d80b      	bhi.n	8000a4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a32:	6879      	ldr	r1, [r7, #4]
 8000a34:	2301      	movs	r3, #1
 8000a36:	425b      	negs	r3, r3
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f8e0 	bl	8000c00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_InitTick+0x64>)
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b003      	add	sp, #12
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x1c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	001a      	movs	r2, r3
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <HAL_IncTick+0x20>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	18d2      	adds	r2, r2, r3
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_IncTick+0x20>)
 8000a72:	601a      	str	r2, [r3, #0]
}
 8000a74:	46c0      	nop			; (mov r8, r8)
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000390 	.word	0x20000390

08000a84 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  return uwTick;
 8000a88:	4b02      	ldr	r3, [pc, #8]	; (8000a94 <HAL_GetTick+0x10>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	20000390 	.word	0x20000390

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff fff0 	bl	8000a84 <HAL_GetTick>
 8000aa4:	0003      	movs	r3, r0
 8000aa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_Delay+0x40>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	001a      	movs	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	189b      	adds	r3, r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	f7ff ffe0 	bl	8000a84 <HAL_GetTick>
 8000ac4:	0002      	movs	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b004      	add	sp, #16
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	20000008 	.word	0x20000008

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aea:	1dfb      	adds	r3, r7, #7
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b7f      	cmp	r3, #127	; 0x7f
 8000af0:	d828      	bhi.n	8000b44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000af2:	4a2f      	ldr	r2, [pc, #188]	; (8000bb0 <__NVIC_SetPriority+0xd4>)
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b25b      	sxtb	r3, r3
 8000afa:	089b      	lsrs	r3, r3, #2
 8000afc:	33c0      	adds	r3, #192	; 0xc0
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	589b      	ldr	r3, [r3, r2]
 8000b02:	1dfa      	adds	r2, r7, #7
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	0011      	movs	r1, r2
 8000b08:	2203      	movs	r2, #3
 8000b0a:	400a      	ands	r2, r1
 8000b0c:	00d2      	lsls	r2, r2, #3
 8000b0e:	21ff      	movs	r1, #255	; 0xff
 8000b10:	4091      	lsls	r1, r2
 8000b12:	000a      	movs	r2, r1
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	401a      	ands	r2, r3
 8000b18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	22ff      	movs	r2, #255	; 0xff
 8000b20:	401a      	ands	r2, r3
 8000b22:	1dfb      	adds	r3, r7, #7
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	2303      	movs	r3, #3
 8000b2a:	4003      	ands	r3, r0
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	481f      	ldr	r0, [pc, #124]	; (8000bb0 <__NVIC_SetPriority+0xd4>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b25b      	sxtb	r3, r3
 8000b38:	089b      	lsrs	r3, r3, #2
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	33c0      	adds	r3, #192	; 0xc0
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b42:	e031      	b.n	8000ba8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <__NVIC_SetPriority+0xd8>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	400b      	ands	r3, r1
 8000b50:	3b08      	subs	r3, #8
 8000b52:	089b      	lsrs	r3, r3, #2
 8000b54:	3306      	adds	r3, #6
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	1dfa      	adds	r2, r7, #7
 8000b60:	7812      	ldrb	r2, [r2, #0]
 8000b62:	0011      	movs	r1, r2
 8000b64:	2203      	movs	r2, #3
 8000b66:	400a      	ands	r2, r1
 8000b68:	00d2      	lsls	r2, r2, #3
 8000b6a:	21ff      	movs	r1, #255	; 0xff
 8000b6c:	4091      	lsls	r1, r2
 8000b6e:	000a      	movs	r2, r1
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	019b      	lsls	r3, r3, #6
 8000b7a:	22ff      	movs	r2, #255	; 0xff
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0018      	movs	r0, r3
 8000b84:	2303      	movs	r3, #3
 8000b86:	4003      	ands	r3, r0
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b8c:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <__NVIC_SetPriority+0xd8>)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	001c      	movs	r4, r3
 8000b94:	230f      	movs	r3, #15
 8000b96:	4023      	ands	r3, r4
 8000b98:	3b08      	subs	r3, #8
 8000b9a:	089b      	lsrs	r3, r3, #2
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	3306      	adds	r3, #6
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	18c3      	adds	r3, r0, r3
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	601a      	str	r2, [r3, #0]
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b003      	add	sp, #12
 8000bae:	bd90      	pop	{r4, r7, pc}
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <SysTick_Config+0x40>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d901      	bls.n	8000bce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e010      	b.n	8000bf0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <SysTick_Config+0x44>)
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	3a01      	subs	r2, #1
 8000bd4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	425b      	negs	r3, r3
 8000bda:	2103      	movs	r1, #3
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff ff7d 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <SysTick_Config+0x44>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x44>)
 8000bea:	2207      	movs	r2, #7
 8000bec:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b002      	add	sp, #8
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	00ffffff 	.word	0x00ffffff
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	607a      	str	r2, [r7, #4]
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	1c02      	adds	r2, r0, #0
 8000c10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff ff5d 	bl	8000adc <__NVIC_SetPriority>
}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b004      	add	sp, #16
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	0018      	movs	r0, r3
 8000c36:	f7ff ffbf 	bl	8000bb8 <SysTick_Config>
 8000c3a:	0003      	movs	r3, r0
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b002      	add	sp, #8
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e155      	b.n	8000f00 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2101      	movs	r1, #1
 8000c5a:	697a      	ldr	r2, [r7, #20]
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	000a      	movs	r2, r1
 8000c60:	4013      	ands	r3, r2
 8000c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d100      	bne.n	8000c6c <HAL_GPIO_Init+0x28>
 8000c6a:	e146      	b.n	8000efa <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d003      	beq.n	8000c7c <HAL_GPIO_Init+0x38>
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2b12      	cmp	r3, #18
 8000c7a:	d123      	bne.n	8000cc4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	08da      	lsrs	r2, r3, #3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3208      	adds	r2, #8
 8000c84:	0092      	lsls	r2, r2, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	4013      	ands	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	220f      	movs	r2, #15
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	43da      	mvns	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	400b      	ands	r3, r1
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	08da      	lsrs	r2, r3, #3
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	3208      	adds	r2, #8
 8000cbe:	0092      	lsls	r2, r2, #2
 8000cc0:	6939      	ldr	r1, [r7, #16]
 8000cc2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2203      	movs	r2, #3
 8000cd0:	409a      	lsls	r2, r3
 8000cd2:	0013      	movs	r3, r2
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	0013      	movs	r3, r2
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	693a      	ldr	r2, [r7, #16]
 8000cf6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d00b      	beq.n	8000d18 <HAL_GPIO_Init+0xd4>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b02      	cmp	r3, #2
 8000d06:	d007      	beq.n	8000d18 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0c:	2b11      	cmp	r3, #17
 8000d0e:	d003      	beq.n	8000d18 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	2b12      	cmp	r3, #18
 8000d16:	d130      	bne.n	8000d7a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	409a      	lsls	r2, r3
 8000d26:	0013      	movs	r3, r2
 8000d28:	43da      	mvns	r2, r3
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	409a      	lsls	r2, r3
 8000d3a:	0013      	movs	r3, r2
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4e:	2201      	movs	r2, #1
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	409a      	lsls	r2, r3
 8000d54:	0013      	movs	r3, r2
 8000d56:	43da      	mvns	r2, r3
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	2201      	movs	r2, #1
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
 8000d6c:	0013      	movs	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	409a      	lsls	r2, r3
 8000d88:	0013      	movs	r3, r2
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	689a      	ldr	r2, [r3, #8]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	409a      	lsls	r2, r3
 8000d9c:	0013      	movs	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	055b      	lsls	r3, r3, #21
 8000db2:	4013      	ands	r3, r2
 8000db4:	d100      	bne.n	8000db8 <HAL_GPIO_Init+0x174>
 8000db6:	e0a0      	b.n	8000efa <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <HAL_GPIO_Init+0x2d4>)
 8000dba:	699a      	ldr	r2, [r3, #24]
 8000dbc:	4b56      	ldr	r3, [pc, #344]	; (8000f18 <HAL_GPIO_Init+0x2d4>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	619a      	str	r2, [r3, #24]
 8000dc4:	4b54      	ldr	r3, [pc, #336]	; (8000f18 <HAL_GPIO_Init+0x2d4>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a52      	ldr	r2, [pc, #328]	; (8000f1c <HAL_GPIO_Init+0x2d8>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	589b      	ldr	r3, [r3, r2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	2203      	movs	r2, #3
 8000de2:	4013      	ands	r3, r2
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	220f      	movs	r2, #15
 8000de8:	409a      	lsls	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	43da      	mvns	r2, r3
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	2390      	movs	r3, #144	; 0x90
 8000df8:	05db      	lsls	r3, r3, #23
 8000dfa:	429a      	cmp	r2, r3
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x1ee>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a47      	ldr	r2, [pc, #284]	; (8000f20 <HAL_GPIO_Init+0x2dc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x1ea>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a46      	ldr	r2, [pc, #280]	; (8000f24 <HAL_GPIO_Init+0x2e0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x1e6>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a45      	ldr	r2, [pc, #276]	; (8000f28 <HAL_GPIO_Init+0x2e4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x1e2>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a44      	ldr	r2, [pc, #272]	; (8000f2c <HAL_GPIO_Init+0x2e8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x1de>
 8000e1e:	2304      	movs	r3, #4
 8000e20:	e008      	b.n	8000e34 <HAL_GPIO_Init+0x1f0>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e006      	b.n	8000e34 <HAL_GPIO_Init+0x1f0>
 8000e26:	2303      	movs	r3, #3
 8000e28:	e004      	b.n	8000e34 <HAL_GPIO_Init+0x1f0>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e002      	b.n	8000e34 <HAL_GPIO_Init+0x1f0>
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x1f0>
 8000e32:	2300      	movs	r3, #0
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	2103      	movs	r1, #3
 8000e38:	400a      	ands	r2, r1
 8000e3a:	0092      	lsls	r2, r2, #2
 8000e3c:	4093      	lsls	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e44:	4935      	ldr	r1, [pc, #212]	; (8000f1c <HAL_GPIO_Init+0x2d8>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e52:	4b37      	ldr	r3, [pc, #220]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43da      	mvns	r2, r3
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d003      	beq.n	8000e76 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e7c:	4b2c      	ldr	r3, [pc, #176]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	43da      	mvns	r2, r3
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685a      	ldr	r2, [r3, #4]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ea6:	4b22      	ldr	r3, [pc, #136]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	035b      	lsls	r3, r3, #13
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	d003      	beq.n	8000eca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ed0:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43da      	mvns	r2, r3
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	2380      	movs	r3, #128	; 0x80
 8000ee6:	039b      	lsls	r3, r3, #14
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_GPIO_Init+0x2ec>)
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	40da      	lsrs	r2, r3
 8000f08:	1e13      	subs	r3, r2, #0
 8000f0a:	d000      	beq.n	8000f0e <HAL_GPIO_Init+0x2ca>
 8000f0c:	e6a2      	b.n	8000c54 <HAL_GPIO_Init+0x10>
  } 
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b006      	add	sp, #24
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	48001000 	.word	0x48001000
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	0008      	movs	r0, r1
 8000f3e:	0011      	movs	r1, r2
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	1c02      	adds	r2, r0, #0
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	1c7b      	adds	r3, r7, #1
 8000f48:	1c0a      	adds	r2, r1, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f4c:	1c7b      	adds	r3, r7, #1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f54:	1cbb      	adds	r3, r7, #2
 8000f56:	881a      	ldrh	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f5e:	1cbb      	adds	r3, r7, #2
 8000f60:	881a      	ldrh	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	000a      	movs	r2, r1
 8000f78:	1cbb      	adds	r3, r7, #2
 8000f7a:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	695b      	ldr	r3, [r3, #20]
 8000f80:	1cba      	adds	r2, r7, #2
 8000f82:	8812      	ldrh	r2, [r2, #0]
 8000f84:	4013      	ands	r3, r2
 8000f86:	d005      	beq.n	8000f94 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f88:	1cbb      	adds	r3, r7, #2
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	041a      	lsls	r2, r3, #16
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000f92:	e003      	b.n	8000f9c <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f94:	1cbb      	adds	r3, r7, #2
 8000f96:	881a      	ldrh	r2, [r3, #0]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	619a      	str	r2, [r3, #24]
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e082      	b.n	80010bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2241      	movs	r2, #65	; 0x41
 8000fba:	5c9b      	ldrb	r3, [r3, r2]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d107      	bne.n	8000fd2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2240      	movs	r2, #64	; 0x40
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fb5b 	bl	8000688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2241      	movs	r2, #65	; 0x41
 8000fd6:	2124      	movs	r1, #36	; 0x24
 8000fd8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	438a      	bics	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4934      	ldr	r1, [pc, #208]	; (80010c4 <HAL_I2C_Init+0x120>)
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4931      	ldr	r1, [pc, #196]	; (80010c8 <HAL_I2C_Init+0x124>)
 8001004:	400a      	ands	r2, r1
 8001006:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d108      	bne.n	8001022 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2180      	movs	r1, #128	; 0x80
 800101a:	0209      	lsls	r1, r1, #8
 800101c:	430a      	orrs	r2, r1
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	e007      	b.n	8001032 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2184      	movs	r1, #132	; 0x84
 800102c:	0209      	lsls	r1, r1, #8
 800102e:	430a      	orrs	r2, r1
 8001030:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d104      	bne.n	8001044 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2280      	movs	r2, #128	; 0x80
 8001040:	0112      	lsls	r2, r2, #4
 8001042:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	491f      	ldr	r1, [pc, #124]	; (80010cc <HAL_I2C_Init+0x128>)
 8001050:	430a      	orrs	r2, r1
 8001052:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68da      	ldr	r2, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	491a      	ldr	r1, [pc, #104]	; (80010c8 <HAL_I2C_Init+0x124>)
 8001060:	400a      	ands	r2, r1
 8001062:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	431a      	orrs	r2, r3
 800106e:	0011      	movs	r1, r2
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	021a      	lsls	r2, r3, #8
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69d9      	ldr	r1, [r3, #28]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a1a      	ldr	r2, [r3, #32]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2241      	movs	r2, #65	; 0x41
 80010a8:	2120      	movs	r1, #32
 80010aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2242      	movs	r2, #66	; 0x42
 80010b6:	2100      	movs	r1, #0
 80010b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	b002      	add	sp, #8
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	f0ffffff 	.word	0xf0ffffff
 80010c8:	ffff7fff 	.word	0xffff7fff
 80010cc:	02008000 	.word	0x02008000

080010d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2241      	movs	r2, #65	; 0x41
 80010de:	5c9b      	ldrb	r3, [r3, r2]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d138      	bne.n	8001158 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2240      	movs	r2, #64	; 0x40
 80010ea:	5c9b      	ldrb	r3, [r3, r2]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d101      	bne.n	80010f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e032      	b.n	800115a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2240      	movs	r2, #64	; 0x40
 80010f8:	2101      	movs	r1, #1
 80010fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2241      	movs	r2, #65	; 0x41
 8001100:	2124      	movs	r1, #36	; 0x24
 8001102:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2101      	movs	r1, #1
 8001110:	438a      	bics	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4911      	ldr	r1, [pc, #68]	; (8001164 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	683a      	ldr	r2, [r7, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2101      	movs	r1, #1
 8001140:	430a      	orrs	r2, r1
 8001142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2241      	movs	r2, #65	; 0x41
 8001148:	2120      	movs	r1, #32
 800114a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2240      	movs	r2, #64	; 0x40
 8001150:	2100      	movs	r1, #0
 8001152:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	e000      	b.n	800115a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001158:	2302      	movs	r3, #2
  }
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	ffffefff 	.word	0xffffefff

08001168 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2241      	movs	r2, #65	; 0x41
 8001176:	5c9b      	ldrb	r3, [r3, r2]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b20      	cmp	r3, #32
 800117c:	d139      	bne.n	80011f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2240      	movs	r2, #64	; 0x40
 8001182:	5c9b      	ldrb	r3, [r3, r2]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d101      	bne.n	800118c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001188:	2302      	movs	r3, #2
 800118a:	e033      	b.n	80011f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2240      	movs	r2, #64	; 0x40
 8001190:	2101      	movs	r1, #1
 8001192:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2241      	movs	r2, #65	; 0x41
 8001198:	2124      	movs	r1, #36	; 0x24
 800119a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2101      	movs	r1, #1
 80011a8:	438a      	bics	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	68fa      	ldr	r2, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2241      	movs	r2, #65	; 0x41
 80011e2:	2120      	movs	r1, #32
 80011e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	2100      	movs	r1, #0
 80011ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80011f2:	2302      	movs	r3, #2
  }
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b004      	add	sp, #16
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	fffff0ff 	.word	0xfffff0ff

08001200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	b08b      	sub	sp, #44	; 0x2c
 8001204:	af06      	add	r7, sp, #24
 8001206:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0d4      	b.n	80013bc <HAL_PCD_Init+0x1bc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a6b      	ldr	r2, [pc, #428]	; (80013c4 <HAL_PCD_Init+0x1c4>)
 8001216:	5c9b      	ldrb	r3, [r3, r2]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d108      	bne.n	8001230 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	238a      	movs	r3, #138	; 0x8a
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	2100      	movs	r1, #0
 8001226:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	0018      	movs	r0, r3
 800122c:	f7ff fb68 	bl	8000900 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a64      	ldr	r2, [pc, #400]	; (80013c4 <HAL_PCD_Init+0x1c4>)
 8001234:	2103      	movs	r1, #3
 8001236:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0018      	movs	r0, r3
 800123e:	f001 f825 	bl	800228c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001242:	230f      	movs	r3, #15
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
 800124a:	e043      	b.n	80012d4 <HAL_PCD_Init+0xd4>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800124c:	200f      	movs	r0, #15
 800124e:	183b      	adds	r3, r7, r0
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	2129      	movs	r1, #41	; 0x29
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	18d3      	adds	r3, r2, r3
 800125a:	185b      	adds	r3, r3, r1
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001260:	183b      	adds	r3, r7, r0
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	2128      	movs	r1, #40	; 0x28
 8001268:	015b      	lsls	r3, r3, #5
 800126a:	18d3      	adds	r3, r2, r3
 800126c:	185b      	adds	r3, r3, r1
 800126e:	183a      	adds	r2, r7, r0
 8001270:	7812      	ldrb	r2, [r2, #0]
 8001272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001274:	183b      	adds	r3, r7, r0
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	183a      	adds	r2, r7, r0
 800127a:	7812      	ldrb	r2, [r2, #0]
 800127c:	b291      	uxth	r1, r2
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	18d3      	adds	r3, r2, r3
 8001284:	3336      	adds	r3, #54	; 0x36
 8001286:	1c0a      	adds	r2, r1, #0
 8001288:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800128a:	183b      	adds	r3, r7, r0
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	212b      	movs	r1, #43	; 0x2b
 8001292:	015b      	lsls	r3, r3, #5
 8001294:	18d3      	adds	r3, r2, r3
 8001296:	185b      	adds	r3, r3, r1
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800129c:	183b      	adds	r3, r7, r0
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	015b      	lsls	r3, r3, #5
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	3338      	adds	r3, #56	; 0x38
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012ac:	183b      	adds	r3, r7, r0
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	015b      	lsls	r3, r3, #5
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	333c      	adds	r3, #60	; 0x3c
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012bc:	183b      	adds	r3, r7, r0
 80012be:	781a      	ldrb	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3202      	adds	r2, #2
 80012c4:	0152      	lsls	r2, r2, #5
 80012c6:	2100      	movs	r1, #0
 80012c8:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ca:	183b      	adds	r3, r7, r0
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	3201      	adds	r2, #1
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	230f      	movs	r3, #15
 80012d6:	18fb      	adds	r3, r7, r3
 80012d8:	781a      	ldrb	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d3b4      	bcc.n	800124c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e2:	230f      	movs	r3, #15
 80012e4:	18fb      	adds	r3, r7, r3
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e03f      	b.n	800136c <HAL_PCD_Init+0x16c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012ec:	200f      	movs	r0, #15
 80012ee:	183b      	adds	r3, r7, r0
 80012f0:	781a      	ldrb	r2, [r3, #0]
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	232a      	movs	r3, #42	; 0x2a
 80012f6:	33ff      	adds	r3, #255	; 0xff
 80012f8:	0152      	lsls	r2, r2, #5
 80012fa:	188a      	adds	r2, r1, r2
 80012fc:	18d3      	adds	r3, r2, r3
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001302:	183b      	adds	r3, r7, r0
 8001304:	781a      	ldrb	r2, [r3, #0]
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2394      	movs	r3, #148	; 0x94
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	0152      	lsls	r2, r2, #5
 800130e:	188a      	adds	r2, r1, r2
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	183a      	adds	r2, r7, r0
 8001314:	7812      	ldrb	r2, [r2, #0]
 8001316:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001318:	183b      	adds	r3, r7, r0
 800131a:	781a      	ldrb	r2, [r3, #0]
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	232c      	movs	r3, #44	; 0x2c
 8001320:	33ff      	adds	r3, #255	; 0xff
 8001322:	0152      	lsls	r2, r2, #5
 8001324:	188a      	adds	r2, r1, r2
 8001326:	18d3      	adds	r3, r2, r3
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800132c:	183b      	adds	r3, r7, r0
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	239c      	movs	r3, #156	; 0x9c
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	0152      	lsls	r2, r2, #5
 8001338:	188a      	adds	r2, r1, r2
 800133a:	18d3      	adds	r3, r2, r3
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001340:	183b      	adds	r3, r7, r0
 8001342:	781a      	ldrb	r2, [r3, #0]
 8001344:	6879      	ldr	r1, [r7, #4]
 8001346:	239e      	movs	r3, #158	; 0x9e
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	0152      	lsls	r2, r2, #5
 800134c:	188a      	adds	r2, r1, r2
 800134e:	18d3      	adds	r3, r2, r3
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001354:	183b      	adds	r3, r7, r0
 8001356:	781a      	ldrb	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	320a      	adds	r2, #10
 800135c:	0152      	lsls	r2, r2, #5
 800135e:	2100      	movs	r1, #0
 8001360:	50d1      	str	r1, [r2, r3]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001362:	183b      	adds	r3, r7, r0
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	183b      	adds	r3, r7, r0
 8001368:	3201      	adds	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	230f      	movs	r3, #15
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	781a      	ldrb	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	d3b8      	bcc.n	80012ec <HAL_PCD_Init+0xec>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6818      	ldr	r0, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	466a      	mov	r2, sp
 8001382:	0011      	movs	r1, r2
 8001384:	001a      	movs	r2, r3
 8001386:	3210      	adds	r2, #16
 8001388:	ca70      	ldmia	r2!, {r4, r5, r6}
 800138a:	c170      	stmia	r1!, {r4, r5, r6}
 800138c:	ca30      	ldmia	r2!, {r4, r5}
 800138e:	c130      	stmia	r1!, {r4, r5}
 8001390:	6859      	ldr	r1, [r3, #4]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f000 ff99 	bl	80022cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2224      	movs	r2, #36	; 0x24
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_PCD_Init+0x1c4>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	5499      	strb	r1, [r3, r2]
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d103      	bne.n	80013ba <HAL_PCD_Init+0x1ba>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 f807 	bl	80013c8 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	0018      	movs	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	b005      	add	sp, #20
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013c4:	00000229 	.word	0x00000229

080013c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	239a      	movs	r3, #154	; 0x9a
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	2101      	movs	r1, #1
 80013de:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	2398      	movs	r3, #152	; 0x98
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	2100      	movs	r1, #0
 80013e8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2254      	movs	r2, #84	; 0x54
 80013ee:	5a9b      	ldrh	r3, [r3, r2]
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2201      	movs	r2, #1
 80013f4:	4313      	orrs	r3, r2
 80013f6:	b299      	uxth	r1, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2254      	movs	r2, #84	; 0x54
 80013fc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2254      	movs	r2, #84	; 0x54
 8001402:	5a9b      	ldrh	r3, [r3, r2]
 8001404:	b29b      	uxth	r3, r3
 8001406:	2202      	movs	r2, #2
 8001408:	4313      	orrs	r3, r2
 800140a:	b299      	uxth	r1, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2254      	movs	r2, #84	; 0x54
 8001410:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b004      	add	sp, #16
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	f000 fb76 	bl	8001b1c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	d100      	bne.n	800143c <HAL_RCC_OscConfig+0x20>
 800143a:	e08e      	b.n	800155a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800143c:	4bc5      	ldr	r3, [pc, #788]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	220c      	movs	r2, #12
 8001442:	4013      	ands	r3, r2
 8001444:	2b04      	cmp	r3, #4
 8001446:	d00e      	beq.n	8001466 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001448:	4bc2      	ldr	r3, [pc, #776]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	220c      	movs	r2, #12
 800144e:	4013      	ands	r3, r2
 8001450:	2b08      	cmp	r3, #8
 8001452:	d117      	bne.n	8001484 <HAL_RCC_OscConfig+0x68>
 8001454:	4bbf      	ldr	r3, [pc, #764]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	23c0      	movs	r3, #192	; 0xc0
 800145a:	025b      	lsls	r3, r3, #9
 800145c:	401a      	ands	r2, r3
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	429a      	cmp	r2, r3
 8001464:	d10e      	bne.n	8001484 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001466:	4bbb      	ldr	r3, [pc, #748]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	029b      	lsls	r3, r3, #10
 800146e:	4013      	ands	r3, r2
 8001470:	d100      	bne.n	8001474 <HAL_RCC_OscConfig+0x58>
 8001472:	e071      	b.n	8001558 <HAL_RCC_OscConfig+0x13c>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d000      	beq.n	800147e <HAL_RCC_OscConfig+0x62>
 800147c:	e06c      	b.n	8001558 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f000 fb4c 	bl	8001b1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d107      	bne.n	800149c <HAL_RCC_OscConfig+0x80>
 800148c:	4bb1      	ldr	r3, [pc, #708]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4bb0      	ldr	r3, [pc, #704]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001492:	2180      	movs	r1, #128	; 0x80
 8001494:	0249      	lsls	r1, r1, #9
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	e02f      	b.n	80014fc <HAL_RCC_OscConfig+0xe0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10c      	bne.n	80014be <HAL_RCC_OscConfig+0xa2>
 80014a4:	4bab      	ldr	r3, [pc, #684]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4baa      	ldr	r3, [pc, #680]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014aa:	49ab      	ldr	r1, [pc, #684]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	4ba8      	ldr	r3, [pc, #672]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4ba7      	ldr	r3, [pc, #668]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014b6:	49a9      	ldr	r1, [pc, #676]	; (800175c <HAL_RCC_OscConfig+0x340>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e01e      	b.n	80014fc <HAL_RCC_OscConfig+0xe0>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d10e      	bne.n	80014e4 <HAL_RCC_OscConfig+0xc8>
 80014c6:	4ba3      	ldr	r3, [pc, #652]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	4ba2      	ldr	r3, [pc, #648]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014cc:	2180      	movs	r1, #128	; 0x80
 80014ce:	02c9      	lsls	r1, r1, #11
 80014d0:	430a      	orrs	r2, r1
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	4b9f      	ldr	r3, [pc, #636]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4b9e      	ldr	r3, [pc, #632]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	0249      	lsls	r1, r1, #9
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	e00b      	b.n	80014fc <HAL_RCC_OscConfig+0xe0>
 80014e4:	4b9b      	ldr	r3, [pc, #620]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b9a      	ldr	r3, [pc, #616]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014ea:	499b      	ldr	r1, [pc, #620]	; (8001758 <HAL_RCC_OscConfig+0x33c>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	4b98      	ldr	r3, [pc, #608]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b97      	ldr	r3, [pc, #604]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80014f6:	4999      	ldr	r1, [pc, #612]	; (800175c <HAL_RCC_OscConfig+0x340>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d014      	beq.n	800152e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fabe 	bl	8000a84 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150e:	f7ff fab9 	bl	8000a84 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b64      	cmp	r3, #100	; 0x64
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e2fd      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001520:	4b8c      	ldr	r3, [pc, #560]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	029b      	lsls	r3, r3, #10
 8001528:	4013      	ands	r3, r2
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0xf2>
 800152c:	e015      	b.n	800155a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7ff faa9 	bl	8000a84 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001538:	f7ff faa4 	bl	8000a84 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e2e8      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154a:	4b82      	ldr	r3, [pc, #520]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	029b      	lsls	r3, r3, #10
 8001552:	4013      	ands	r3, r2
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x11c>
 8001556:	e000      	b.n	800155a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d100      	bne.n	8001566 <HAL_RCC_OscConfig+0x14a>
 8001564:	e06c      	b.n	8001640 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001566:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	220c      	movs	r2, #12
 800156c:	4013      	ands	r3, r2
 800156e:	d00e      	beq.n	800158e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	220c      	movs	r2, #12
 8001576:	4013      	ands	r3, r2
 8001578:	2b08      	cmp	r3, #8
 800157a:	d11f      	bne.n	80015bc <HAL_RCC_OscConfig+0x1a0>
 800157c:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	23c0      	movs	r3, #192	; 0xc0
 8001582:	025b      	lsls	r3, r3, #9
 8001584:	401a      	ands	r2, r3
 8001586:	2380      	movs	r3, #128	; 0x80
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	429a      	cmp	r2, r3
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	4b71      	ldr	r3, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2202      	movs	r2, #2
 8001594:	4013      	ands	r3, r2
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x188>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e2bb      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	22f8      	movs	r2, #248	; 0xf8
 80015aa:	4393      	bics	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00da      	lsls	r2, r3, #3
 80015b4:	4b67      	ldr	r3, [pc, #412]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e041      	b.n	8001640 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d024      	beq.n	800160e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c4:	4b63      	ldr	r3, [pc, #396]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b62      	ldr	r3, [pc, #392]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff fa58 	bl	8000a84 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fa53 	bl	8000a84 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e297      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	4b59      	ldr	r3, [pc, #356]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0f1      	beq.n	80015da <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f6:	4b57      	ldr	r3, [pc, #348]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	22f8      	movs	r2, #248	; 0xf8
 80015fc:	4393      	bics	r3, r2
 80015fe:	0019      	movs	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	00da      	lsls	r2, r3, #3
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001608:	430a      	orrs	r2, r1
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	e018      	b.n	8001640 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160e:	4b51      	ldr	r3, [pc, #324]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b50      	ldr	r3, [pc, #320]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001614:	2101      	movs	r1, #1
 8001616:	438a      	bics	r2, r1
 8001618:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fa33 	bl	8000a84 <HAL_GetTick>
 800161e:	0003      	movs	r3, r0
 8001620:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001624:	f7ff fa2e 	bl	8000a84 <HAL_GetTick>
 8001628:	0002      	movs	r2, r0
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e272      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001636:	4b47      	ldr	r3, [pc, #284]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2202      	movs	r2, #2
 800163c:	4013      	ands	r3, r2
 800163e:	d1f1      	bne.n	8001624 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	d036      	beq.n	80016b8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fa11 	bl	8000a84 <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fa0c 	bl	8000a84 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e250      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b36      	ldr	r3, [pc, #216]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d0f1      	beq.n	8001668 <HAL_RCC_OscConfig+0x24c>
 8001684:	e018      	b.n	80016b8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	4b32      	ldr	r3, [pc, #200]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800168c:	2101      	movs	r1, #1
 800168e:	438a      	bics	r2, r1
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001692:	f7ff f9f7 	bl	8000a84 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff f9f2 	bl	8000a84 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e236      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d1f1      	bne.n	800169c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2204      	movs	r2, #4
 80016be:	4013      	ands	r3, r2
 80016c0:	d100      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2a8>
 80016c2:	e0b5      	b.n	8001830 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016c4:	231f      	movs	r3, #31
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2200      	movs	r2, #0
 80016ca:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016cc:	4b21      	ldr	r3, [pc, #132]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016ce:	69da      	ldr	r2, [r3, #28]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	055b      	lsls	r3, r3, #21
 80016d4:	4013      	ands	r3, r2
 80016d6:	d111      	bne.n	80016fc <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	0549      	lsls	r1, r1, #21
 80016e2:	430a      	orrs	r2, r1
 80016e4:	61da      	str	r2, [r3, #28]
 80016e6:	4b1b      	ldr	r3, [pc, #108]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	055b      	lsls	r3, r3, #21
 80016ee:	4013      	ands	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016f4:	231f      	movs	r3, #31
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <HAL_RCC_OscConfig+0x344>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4013      	ands	r3, r2
 8001706:	d11a      	bne.n	800173e <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <HAL_RCC_OscConfig+0x344>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HAL_RCC_OscConfig+0x344>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0049      	lsls	r1, r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001716:	f7ff f9b5 	bl	8000a84 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001720:	f7ff f9b0 	bl	8000a84 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1f4      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x344>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4013      	ands	r3, r2
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d10e      	bne.n	8001764 <HAL_RCC_OscConfig+0x348>
 8001746:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 8001748:	6a1a      	ldr	r2, [r3, #32]
 800174a:	4b02      	ldr	r3, [pc, #8]	; (8001754 <HAL_RCC_OscConfig+0x338>)
 800174c:	2101      	movs	r1, #1
 800174e:	430a      	orrs	r2, r1
 8001750:	621a      	str	r2, [r3, #32]
 8001752:	e035      	b.n	80017c0 <HAL_RCC_OscConfig+0x3a4>
 8001754:	40021000 	.word	0x40021000
 8001758:	fffeffff 	.word	0xfffeffff
 800175c:	fffbffff 	.word	0xfffbffff
 8001760:	40007000 	.word	0x40007000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10c      	bne.n	8001786 <HAL_RCC_OscConfig+0x36a>
 800176c:	4bca      	ldr	r3, [pc, #808]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800176e:	6a1a      	ldr	r2, [r3, #32]
 8001770:	4bc9      	ldr	r3, [pc, #804]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001772:	2101      	movs	r1, #1
 8001774:	438a      	bics	r2, r1
 8001776:	621a      	str	r2, [r3, #32]
 8001778:	4bc7      	ldr	r3, [pc, #796]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800177a:	6a1a      	ldr	r2, [r3, #32]
 800177c:	4bc6      	ldr	r3, [pc, #792]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800177e:	2104      	movs	r1, #4
 8001780:	438a      	bics	r2, r1
 8001782:	621a      	str	r2, [r3, #32]
 8001784:	e01c      	b.n	80017c0 <HAL_RCC_OscConfig+0x3a4>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	2b05      	cmp	r3, #5
 800178c:	d10c      	bne.n	80017a8 <HAL_RCC_OscConfig+0x38c>
 800178e:	4bc2      	ldr	r3, [pc, #776]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	4bc1      	ldr	r3, [pc, #772]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001794:	2104      	movs	r1, #4
 8001796:	430a      	orrs	r2, r1
 8001798:	621a      	str	r2, [r3, #32]
 800179a:	4bbf      	ldr	r3, [pc, #764]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800179c:	6a1a      	ldr	r2, [r3, #32]
 800179e:	4bbe      	ldr	r3, [pc, #760]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	430a      	orrs	r2, r1
 80017a4:	621a      	str	r2, [r3, #32]
 80017a6:	e00b      	b.n	80017c0 <HAL_RCC_OscConfig+0x3a4>
 80017a8:	4bbb      	ldr	r3, [pc, #748]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80017aa:	6a1a      	ldr	r2, [r3, #32]
 80017ac:	4bba      	ldr	r3, [pc, #744]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	438a      	bics	r2, r1
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	4bb8      	ldr	r3, [pc, #736]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4bb7      	ldr	r3, [pc, #732]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80017ba:	2104      	movs	r1, #4
 80017bc:	438a      	bics	r2, r1
 80017be:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d014      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff f95c 	bl	8000a84 <HAL_GetTick>
 80017cc:	0003      	movs	r3, r0
 80017ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d2:	f7ff f957 	bl	8000a84 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4aaf      	ldr	r2, [pc, #700]	; (8001a9c <HAL_RCC_OscConfig+0x680>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e19a      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e6:	4bac      	ldr	r3, [pc, #688]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	d0f0      	beq.n	80017d2 <HAL_RCC_OscConfig+0x3b6>
 80017f0:	e013      	b.n	800181a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f2:	f7ff f947 	bl	8000a84 <HAL_GetTick>
 80017f6:	0003      	movs	r3, r0
 80017f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fa:	e009      	b.n	8001810 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff f942 	bl	8000a84 <HAL_GetTick>
 8001800:	0002      	movs	r2, r0
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4aa5      	ldr	r2, [pc, #660]	; (8001a9c <HAL_RCC_OscConfig+0x680>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e185      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	4ba1      	ldr	r3, [pc, #644]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	2202      	movs	r2, #2
 8001816:	4013      	ands	r3, r2
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800181a:	231f      	movs	r3, #31
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d105      	bne.n	8001830 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001824:	4b9c      	ldr	r3, [pc, #624]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001826:	69da      	ldr	r2, [r3, #28]
 8001828:	4b9b      	ldr	r3, [pc, #620]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800182a:	499d      	ldr	r1, [pc, #628]	; (8001aa0 <HAL_RCC_OscConfig+0x684>)
 800182c:	400a      	ands	r2, r1
 800182e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2210      	movs	r2, #16
 8001836:	4013      	ands	r3, r2
 8001838:	d063      	beq.n	8001902 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d12a      	bne.n	8001898 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001842:	4b95      	ldr	r3, [pc, #596]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001848:	2104      	movs	r1, #4
 800184a:	430a      	orrs	r2, r1
 800184c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800184e:	4b92      	ldr	r3, [pc, #584]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001854:	2101      	movs	r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185a:	f7ff f913 	bl	8000a84 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001864:	f7ff f90e 	bl	8000a84 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e152      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001876:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d0f1      	beq.n	8001864 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001880:	4b85      	ldr	r3, [pc, #532]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	22f8      	movs	r2, #248	; 0xf8
 8001886:	4393      	bics	r3, r2
 8001888:	0019      	movs	r1, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	00da      	lsls	r2, r3, #3
 8001890:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001892:	430a      	orrs	r2, r1
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
 8001896:	e034      	b.n	8001902 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	3305      	adds	r3, #5
 800189e:	d111      	bne.n	80018c4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018a0:	4b7d      	ldr	r3, [pc, #500]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a4:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	2104      	movs	r1, #4
 80018a8:	438a      	bics	r2, r1
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018ac:	4b7a      	ldr	r3, [pc, #488]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	22f8      	movs	r2, #248	; 0xf8
 80018b2:	4393      	bics	r3, r2
 80018b4:	0019      	movs	r1, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	00da      	lsls	r2, r3, #3
 80018bc:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
 80018c2:	e01e      	b.n	8001902 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018c4:	4b74      	ldr	r3, [pc, #464]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c8:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	2104      	movs	r1, #4
 80018cc:	430a      	orrs	r2, r1
 80018ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018d0:	4b71      	ldr	r3, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d4:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018d6:	2101      	movs	r1, #1
 80018d8:	438a      	bics	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff f8d2 	bl	8000a84 <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018e6:	f7ff f8cd 	bl	8000a84 <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e111      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f8:	4b67      	ldr	r3, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80018fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fc:	2202      	movs	r2, #2
 80018fe:	4013      	ands	r3, r2
 8001900:	d1f1      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2220      	movs	r2, #32
 8001908:	4013      	ands	r3, r2
 800190a:	d05c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800190c:	4b62      	ldr	r3, [pc, #392]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	220c      	movs	r2, #12
 8001912:	4013      	ands	r3, r2
 8001914:	2b0c      	cmp	r3, #12
 8001916:	d00e      	beq.n	8001936 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001918:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	220c      	movs	r2, #12
 800191e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001920:	2b08      	cmp	r3, #8
 8001922:	d114      	bne.n	800194e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001924:	4b5c      	ldr	r3, [pc, #368]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	23c0      	movs	r3, #192	; 0xc0
 800192a:	025b      	lsls	r3, r3, #9
 800192c:	401a      	ands	r2, r3
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	025b      	lsls	r3, r3, #9
 8001932:	429a      	cmp	r2, r3
 8001934:	d10b      	bne.n	800194e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001936:	4b58      	ldr	r3, [pc, #352]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	4013      	ands	r3, r2
 8001940:	d040      	beq.n	80019c4 <HAL_RCC_OscConfig+0x5a8>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d03c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e0e6      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01b      	beq.n	800198e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001956:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800195a:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	0249      	lsls	r1, r1, #9
 8001960:	430a      	orrs	r2, r1
 8001962:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff f88e 	bl	8000a84 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800196e:	f7ff f889 	bl	8000a84 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e0cd      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001980:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	4013      	ands	r3, r2
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x552>
 800198c:	e01b      	b.n	80019c6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800198e:	4b42      	ldr	r3, [pc, #264]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001994:	4943      	ldr	r1, [pc, #268]	; (8001aa4 <HAL_RCC_OscConfig+0x688>)
 8001996:	400a      	ands	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7ff f873 	bl	8000a84 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019a4:	f7ff f86e 	bl	8000a84 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e0b2      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019b6:	4b38      	ldr	r3, [pc, #224]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80019b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x588>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019c4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d100      	bne.n	80019d0 <HAL_RCC_OscConfig+0x5b4>
 80019ce:	e0a4      	b.n	8001b1a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019d0:	4b31      	ldr	r3, [pc, #196]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	220c      	movs	r2, #12
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d100      	bne.n	80019de <HAL_RCC_OscConfig+0x5c2>
 80019dc:	e078      	b.n	8001ad0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d14c      	bne.n	8001a80 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b2c      	ldr	r3, [pc, #176]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 80019ec:	492e      	ldr	r1, [pc, #184]	; (8001aa8 <HAL_RCC_OscConfig+0x68c>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff f847 	bl	8000a84 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fc:	f7ff f842 	bl	8000a84 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e086      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a0e:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	049b      	lsls	r3, r3, #18
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	220f      	movs	r2, #15
 8001a20:	4393      	bics	r3, r2
 8001a22:	0019      	movs	r1, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a2e:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_RCC_OscConfig+0x690>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a40:	431a      	orrs	r2, r3
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a44:	430a      	orrs	r2, r1
 8001a46:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a4e:	2180      	movs	r1, #128	; 0x80
 8001a50:	0449      	lsls	r1, r1, #17
 8001a52:	430a      	orrs	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a56:	f7ff f815 	bl	8000a84 <HAL_GetTick>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a60:	f7ff f810 	bl	8000a84 <HAL_GetTick>
 8001a64:	0002      	movs	r2, r0
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e054      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	049b      	lsls	r3, r3, #18
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x644>
 8001a7e:	e04c      	b.n	8001b1a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_RCC_OscConfig+0x67c>)
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <HAL_RCC_OscConfig+0x68c>)
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fffa 	bl	8000a84 <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a94:	e015      	b.n	8001ac2 <HAL_RCC_OscConfig+0x6a6>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	00001388 	.word	0x00001388
 8001aa0:	efffffff 	.word	0xefffffff
 8001aa4:	fffeffff 	.word	0xfffeffff
 8001aa8:	feffffff 	.word	0xfeffffff
 8001aac:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7fe ffe8 	bl	8000a84 <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e02c      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_RCC_OscConfig+0x708>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	049b      	lsls	r3, r3, #18
 8001aca:	4013      	ands	r3, r2
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x694>
 8001ace:	e024      	b.n	8001b1a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e01f      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <HAL_RCC_OscConfig+0x708>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_RCC_OscConfig+0x708>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	23c0      	movs	r3, #192	; 0xc0
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	401a      	ands	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d10e      	bne.n	8001b16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	220f      	movs	r2, #15
 8001afc:	401a      	ands	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	23f0      	movs	r3, #240	; 0xf0
 8001b0a:	039b      	lsls	r3, r3, #14
 8001b0c:	401a      	ands	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b008      	add	sp, #32
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0bf      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b61      	ldr	r3, [pc, #388]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d911      	bls.n	8001b6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b5e      	ldr	r3, [pc, #376]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4393      	bics	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	4b5b      	ldr	r3, [pc, #364]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5c:	4b59      	ldr	r3, [pc, #356]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2201      	movs	r2, #1
 8001b62:	4013      	ands	r3, r2
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0a6      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d015      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d006      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b82:	4b51      	ldr	r3, [pc, #324]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b50      	ldr	r3, [pc, #320]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001b88:	21e0      	movs	r1, #224	; 0xe0
 8001b8a:	00c9      	lsls	r1, r1, #3
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b90:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	22f0      	movs	r2, #240	; 0xf0
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4013      	ands	r3, r2
 8001bac:	d04c      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	029b      	lsls	r3, r3, #10
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d120      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e07a      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bce:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	2380      	movs	r3, #128	; 0x80
 8001bd4:	049b      	lsls	r3, r3, #18
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d114      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e06e      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d107      	bne.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d108      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e062      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf6:	4b34      	ldr	r3, [pc, #208]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d101      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e05b      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c04:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	4393      	bics	r3, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4b2d      	ldr	r3, [pc, #180]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c14:	430a      	orrs	r2, r1
 8001c16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c18:	f7fe ff34 	bl	8000a84 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c22:	f7fe ff2f 	bl	8000a84 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a27      	ldr	r2, [pc, #156]	; (8001ccc <HAL_RCC_ClockConfig+0x1a4>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e042      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	4b24      	ldr	r3, [pc, #144]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	401a      	ands	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d1ec      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4013      	ands	r3, r2
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d211      	bcs.n	8001c7a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4393      	bics	r3, r2
 8001c5e:	0019      	movs	r1, r3
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_RCC_ClockConfig+0x19c>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	4013      	ands	r3, r2
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e020      	b.n	8001cbc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4013      	ands	r3, r2
 8001c82:	d009      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a11      	ldr	r2, [pc, #68]	; (8001cd0 <HAL_RCC_ClockConfig+0x1a8>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68da      	ldr	r2, [r3, #12]
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c98:	f000 f820 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c9c:	0001      	movs	r1, r0
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a0>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	220f      	movs	r2, #15
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1ac>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	000a      	movs	r2, r1
 8001cae:	40da      	lsrs	r2, r3
 8001cb0:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1b0>)
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7fe fe9f 	bl	80009f8 <HAL_InitTick>
  
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b004      	add	sp, #16
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	00001388 	.word	0x00001388
 8001cd0:	fffff8ff 	.word	0xfffff8ff
 8001cd4:	080023bc 	.word	0x080023bc
 8001cd8:	20000000 	.word	0x20000000

08001cdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b08f      	sub	sp, #60	; 0x3c
 8001ce0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ce2:	2314      	movs	r3, #20
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	4a37      	ldr	r2, [pc, #220]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001ce8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cea:	c313      	stmia	r3!, {r0, r1, r4}
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	4a35      	ldr	r2, [pc, #212]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xec>)
 8001cf4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cf6:	c313      	stmia	r3!, {r0, r1, r4}
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d00:	2300      	movs	r3, #0
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d04:	2300      	movs	r3, #0
 8001d06:	637b      	str	r3, [r7, #52]	; 0x34
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	220c      	movs	r2, #12
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d006      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x52>
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d043      	beq.n	8001dac <HAL_RCC_GetSysClockFreq+0xd0>
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d144      	bne.n	8001db2 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d2c:	e044      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	220f      	movs	r2, #15
 8001d34:	4013      	ands	r3, r2
 8001d36:	2214      	movs	r2, #20
 8001d38:	18ba      	adds	r2, r7, r2
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d3e:	4b23      	ldr	r3, [pc, #140]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf0>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	220f      	movs	r2, #15
 8001d44:	4013      	ands	r3, r2
 8001d46:	1d3a      	adds	r2, r7, #4
 8001d48:	5cd3      	ldrb	r3, [r2, r3]
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4e:	23c0      	movs	r3, #192	; 0xc0
 8001d50:	025b      	lsls	r3, r3, #9
 8001d52:	401a      	ands	r2, r3
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d109      	bne.n	8001d70 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d5e:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d60:	f7fe f9d2 	bl	8000108 <__udivsi3>
 8001d64:	0003      	movs	r3, r0
 8001d66:	001a      	movs	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	4353      	muls	r3, r2
 8001d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6e:	e01a      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d72:	23c0      	movs	r3, #192	; 0xc0
 8001d74:	025b      	lsls	r3, r3, #9
 8001d76:	401a      	ands	r2, r3
 8001d78:	23c0      	movs	r3, #192	; 0xc0
 8001d7a:	025b      	lsls	r3, r3, #9
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d109      	bne.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d82:	4814      	ldr	r0, [pc, #80]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d84:	f7fe f9c0 	bl	8000108 <__udivsi3>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	4353      	muls	r3, r2
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d96:	480e      	ldr	r0, [pc, #56]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d98:	f7fe f9b6 	bl	8000108 <__udivsi3>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	001a      	movs	r2, r3
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	4353      	muls	r3, r2
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001daa:	e005      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001dac:	4b09      	ldr	r3, [pc, #36]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db0:	e002      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001db4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dba:	0018      	movs	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	b00f      	add	sp, #60	; 0x3c
 8001dc0:	bd90      	pop	{r4, r7, pc}
 8001dc2:	46c0      	nop			; (mov r8, r8)
 8001dc4:	0800239c 	.word	0x0800239c
 8001dc8:	080023ac 	.word	0x080023ac
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	007a1200 	.word	0x007a1200
 8001dd4:	02dc6c00 	.word	0x02dc6c00

08001dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	025b      	lsls	r3, r3, #9
 8001df0:	4013      	ands	r3, r2
 8001df2:	d100      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001df4:	e08f      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2317      	movs	r3, #23
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfe:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	2380      	movs	r3, #128	; 0x80
 8001e04:	055b      	lsls	r3, r3, #21
 8001e06:	4013      	ands	r3, r2
 8001e08:	d111      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e0c:	69da      	ldr	r2, [r3, #28]
 8001e0e:	4b6b      	ldr	r3, [pc, #428]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0549      	lsls	r1, r1, #21
 8001e14:	430a      	orrs	r2, r1
 8001e16:	61da      	str	r2, [r3, #28]
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e1a:	69da      	ldr	r2, [r3, #28]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	055b      	lsls	r3, r3, #21
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e26:	2317      	movs	r3, #23
 8001e28:	18fb      	adds	r3, r7, r3
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2e:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	d11a      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e3a:	4b61      	ldr	r3, [pc, #388]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b60      	ldr	r3, [pc, #384]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0049      	lsls	r1, r1, #1
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e48:	f7fe fe1c 	bl	8000a84 <HAL_GetTick>
 8001e4c:	0003      	movs	r3, r0
 8001e4e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e50:	e008      	b.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e52:	f7fe fe17 	bl	8000a84 <HAL_GetTick>
 8001e56:	0002      	movs	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b64      	cmp	r3, #100	; 0x64
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0a6      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e64:	4b56      	ldr	r3, [pc, #344]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	2380      	movs	r3, #128	; 0x80
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e70:	4b52      	ldr	r3, [pc, #328]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e72:	6a1a      	ldr	r2, [r3, #32]
 8001e74:	23c0      	movs	r3, #192	; 0xc0
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d034      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	23c0      	movs	r3, #192	; 0xc0
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d02c      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a4b      	ldr	r2, [pc, #300]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001e98:	4013      	ands	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e9e:	6a1a      	ldr	r2, [r3, #32]
 8001ea0:	4b46      	ldr	r3, [pc, #280]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	0249      	lsls	r1, r1, #9
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eaa:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eb0:	4945      	ldr	r1, [pc, #276]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d013      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7fe fdde 	bl	8000a84 <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e009      	b.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7fe fdd9 	bl	8000a84 <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	4a3c      	ldr	r2, [pc, #240]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e067      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee2:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	4a34      	ldr	r2, [pc, #208]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001efc:	430a      	orrs	r2, r1
 8001efe:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f00:	2317      	movs	r3, #23
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f10:	492f      	ldr	r1, [pc, #188]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001f12:	400a      	ands	r2, r1
 8001f14:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d009      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	2203      	movs	r2, #3
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d009      	beq.n	8001f52 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	4a24      	ldr	r2, [pc, #144]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	0019      	movs	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d009      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f5c:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	2210      	movs	r2, #16
 8001f62:	4393      	bics	r3, r2
 8001f64:	0019      	movs	r1, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	2380      	movs	r3, #128	; 0x80
 8001f76:	029b      	lsls	r3, r3, #10
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d009      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	2280      	movs	r2, #128	; 0x80
 8001f82:	4393      	bics	r3, r2
 8001f84:	0019      	movs	r1, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d009      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	2240      	movs	r2, #64	; 0x40
 8001fa2:	4393      	bics	r3, r2
 8001fa4:	0019      	movs	r1, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b006      	add	sp, #24
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	fffffcff 	.word	0xfffffcff
 8001fc8:	fffeffff 	.word	0xfffeffff
 8001fcc:	00001388 	.word	0x00001388
 8001fd0:	efffffff 	.word	0xefffffff
 8001fd4:	fffcffff 	.word	0xfffcffff

08001fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d101      	bne.n	8001fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e08a      	b.n	8002100 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	225d      	movs	r2, #93	; 0x5d
 8001ff4:	5c9b      	ldrb	r3, [r3, r2]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d107      	bne.n	800200c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	225c      	movs	r2, #92	; 0x5c
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0018      	movs	r0, r3
 8002008:	f7fe fb8c 	bl	8000724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	225d      	movs	r2, #93	; 0x5d
 8002010:	2102      	movs	r1, #2
 8002012:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2140      	movs	r1, #64	; 0x40
 8002020:	438a      	bics	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	23e0      	movs	r3, #224	; 0xe0
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	429a      	cmp	r2, r3
 800202e:	d902      	bls.n	8002036 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e002      	b.n	800203c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	015b      	lsls	r3, r3, #5
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	23f0      	movs	r3, #240	; 0xf0
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	429a      	cmp	r2, r3
 8002046:	d008      	beq.n	800205a <HAL_SPI_Init+0x82>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	23e0      	movs	r3, #224	; 0xe0
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	429a      	cmp	r2, r3
 8002052:	d002      	beq.n	800205a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10c      	bne.n	800207c <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	23e0      	movs	r3, #224	; 0xe0
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	429a      	cmp	r2, r3
 800206c:	d903      	bls.n	8002076 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	631a      	str	r2, [r3, #48]	; 0x30
 8002074:	e002      	b.n	800207c <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6999      	ldr	r1, [r3, #24]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	400b      	ands	r3, r1
 800209c:	431a      	orrs	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	431a      	orrs	r2, r3
 80020aa:	0011      	movs	r1, r2
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	0c1b      	lsrs	r3, r3, #16
 80020be:	2204      	movs	r2, #4
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	0011      	movs	r1, r2
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	430a      	orrs	r2, r1
 80020de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	69da      	ldr	r2, [r3, #28]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4907      	ldr	r1, [pc, #28]	; (8002108 <HAL_SPI_Init+0x130>)
 80020ec:	400a      	ands	r2, r1
 80020ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	225d      	movs	r2, #93	; 0x5d
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b004      	add	sp, #16
 8002106:	bd80      	pop	{r7, pc}
 8002108:	fffff7ff 	.word	0xfffff7ff

0800210c <HAL_TSC_Init>:
  *         in the TSC_InitTypeDef structure and initialize the associated handle.
  * @param  htsc TSC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TSC_Init(TSC_HandleTypeDef *htsc)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check TSC handle allocation */
  if (htsc == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_TSC_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e074      	b.n	8002208 <HAL_TSC_Init+0xfc>
  assert_param(IS_TSC_MCE_IT(htsc->Init.MaxCountInterrupt));
  assert_param(IS_TSC_GROUP(htsc->Init.ChannelIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.ShieldIOs));
  assert_param(IS_TSC_GROUP(htsc->Init.SamplingIOs));

  if (htsc->State == HAL_TSC_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223c      	movs	r2, #60	; 0x3c
 8002122:	5c9b      	ldrb	r3, [r3, r2]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d107      	bne.n	800213a <HAL_TSC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htsc->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	223d      	movs	r2, #61	; 0x3d
 800212e:	2100      	movs	r1, #0
 8002130:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    htsc->MspInitCallback(htsc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_TSC_MspInit(htsc);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	0018      	movs	r0, r3
 8002136:	f7fe fb43 	bl	80007c0 <HAL_TSC_MspInit>
#endif /* USE_HAL_TSC_REGISTER_CALLBACKS */
  }

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_BUSY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	223c      	movs	r2, #60	; 0x3c
 800213e:	2102      	movs	r1, #2
 8002140:	5499      	strb	r1, [r3, r2]

  /*--------------------------------------------------------------------------*/
  /* Set TSC parameters */

  /* Enable TSC */
  htsc->Instance->CR = TSC_CR_TSCE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]

  /* Set all functions */
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
                         htsc->Init.CTPulseLowLength |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002158:	431a      	orrs	r2, r3
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	045b      	lsls	r3, r3, #17
                         htsc->Init.CTPulseLowLength |
 8002160:	431a      	orrs	r2, r3
                         htsc->Init.SpreadSpectrumPrescaler |
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
                         (htsc->Init.SpreadSpectrumDeviation << TSC_CR_SSD_Pos) |
 8002166:	431a      	orrs	r2, r3
                         htsc->Init.PulseGeneratorPrescaler |
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
                         htsc->Init.SpreadSpectrumPrescaler |
 800216c:	431a      	orrs	r2, r3
                         htsc->Init.MaxCountValue |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
                         htsc->Init.PulseGeneratorPrescaler |
 8002172:	431a      	orrs	r2, r3
                         htsc->Init.SynchroPinPolarity |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         htsc->Init.MaxCountValue |
 8002178:	431a      	orrs	r2, r3
                         htsc->Init.AcquisitionMode);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         htsc->Init.SynchroPinPolarity |
 800217e:	431a      	orrs	r2, r3
  htsc->Instance->CR |= (htsc->Init.CTPulseHighLength |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	601a      	str	r2, [r3, #0]

  /* Spread spectrum */
  if (htsc->Init.SpreadSpectrum == ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	7b1b      	ldrb	r3, [r3, #12]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d108      	bne.n	80021a2 <HAL_TSC_Init+0x96>
  {
    htsc->Instance->CR |= TSC_CR_SSE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0249      	lsls	r1, r1, #9
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Disable Schmitt trigger hysteresis on all used TSC IOs */
  htsc->Instance->IOHCR = (~(htsc->Init.ChannelIOs | htsc->Init.ShieldIOs | htsc->Init.SamplingIOs));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	43d2      	mvns	r2, r2
 80021b8:	611a      	str	r2, [r3, #16]

  /* Set channel and shield IOs */
  htsc->Instance->IOCCR = (htsc->Init.ChannelIOs | htsc->Init.ShieldIOs);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set sampling IOs */
  htsc->Instance->IOSCR = htsc->Init.SamplingIOs;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021d2:	621a      	str	r2, [r3, #32]

  /* Set the groups to be acquired */
  htsc->Instance->IOGCSR = TSC_extract_groups(htsc->Init.ChannelIOs);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681c      	ldr	r4, [r3, #0]
 80021dc:	0010      	movs	r0, r2
 80021de:	f000 f817 	bl	8002210 <TSC_extract_groups>
 80021e2:	0003      	movs	r3, r0
 80021e4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable interrupts */
  htsc->Instance->IER &= (~(TSC_IT_EOA | TSC_IT_MCE));
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2103      	movs	r1, #3
 80021f2:	438a      	bics	r2, r1
 80021f4:	605a      	str	r2, [r3, #4]

  /* Clear flags */
  htsc->Instance->ICR = (TSC_FLAG_EOA | TSC_FLAG_MCE);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2203      	movs	r2, #3
 80021fc:	609a      	str	r2, [r3, #8]

  /*--------------------------------------------------------------------------*/

  /* Initialize the TSC state */
  htsc->State = HAL_TSC_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	223c      	movs	r2, #60	; 0x3c
 8002202:	2101      	movs	r1, #1
 8002204:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	0018      	movs	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	b003      	add	sp, #12
 800220e:	bd90      	pop	{r4, r7, pc}

08002210 <TSC_extract_groups>:
  * @brief  Utility function used to set the acquired groups mask.
  * @param  iomask Channels IOs mask
  * @retval Acquired groups mask
  */
static uint32_t TSC_extract_groups(uint32_t iomask)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t groups = 0UL;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  uint32_t idx;

  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	e011      	b.n	8002246 <TSC_extract_groups+0x36>
  {
    if ((iomask & (0x0FUL << (idx * 4UL))) != 0UL )
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	409a      	lsls	r2, r3
 800222a:	0013      	movs	r3, r2
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	4013      	ands	r3, r2
 8002230:	d006      	beq.n	8002240 <TSC_extract_groups+0x30>
    {
      groups |= (1UL << idx);
 8002232:	2201      	movs	r2, #1
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	409a      	lsls	r2, r3
 8002238:	0013      	movs	r3, r2
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4313      	orrs	r3, r2
 800223e:	60fb      	str	r3, [r7, #12]
  for (idx = 0UL; idx < (uint32_t)TSC_NB_OF_GROUPS; idx++)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b07      	cmp	r3, #7
 800224a:	d9ea      	bls.n	8002222 <TSC_extract_groups+0x12>
    }
  }

  return groups;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	0018      	movs	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	b004      	add	sp, #16
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002260:	210e      	movs	r1, #14
 8002262:	187b      	adds	r3, r7, r1
 8002264:	4a08      	ldr	r2, [pc, #32]	; (8002288 <USB_EnableGlobalInt+0x30>)
 8002266:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	5a9b      	ldrh	r3, [r3, r2]
 800226e:	b29a      	uxth	r2, r3
 8002270:	187b      	adds	r3, r7, r1
 8002272:	881b      	ldrh	r3, [r3, #0]
 8002274:	4313      	orrs	r3, r2
 8002276:	b299      	uxth	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	0018      	movs	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	b004      	add	sp, #16
 8002286:	bd80      	pop	{r7, pc}
 8002288:	ffffbf80 	.word	0xffffbf80

0800228c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002294:	210e      	movs	r1, #14
 8002296:	187b      	adds	r3, r7, r1
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <USB_DisableGlobalInt+0x3c>)
 800229a:	801a      	strh	r2, [r3, #0]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2240      	movs	r2, #64	; 0x40
 80022a0:	5a9b      	ldrh	r3, [r3, r2]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	187a      	adds	r2, r7, r1
 80022a8:	2100      	movs	r1, #0
 80022aa:	5e52      	ldrsh	r2, [r2, r1]
 80022ac:	43d2      	mvns	r2, r2
 80022ae:	b212      	sxth	r2, r2
 80022b0:	4013      	ands	r3, r2
 80022b2:	b21b      	sxth	r3, r3
 80022b4:	b299      	uxth	r1, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2240      	movs	r2, #64	; 0x40
 80022ba:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b004      	add	sp, #16
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	ffffbf80 	.word	0xffffbf80

080022cc <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80022cc:	b084      	sub	sp, #16
 80022ce:	b590      	push	{r4, r7, lr}
 80022d0:	46c6      	mov	lr, r8
 80022d2:	b500      	push	{lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	2004      	movs	r0, #4
 80022dc:	2410      	movs	r4, #16
 80022de:	46a4      	mov	ip, r4
 80022e0:	2408      	movs	r4, #8
 80022e2:	46a0      	mov	r8, r4
 80022e4:	44b8      	add	r8, r7
 80022e6:	44c4      	add	ip, r8
 80022e8:	4460      	add	r0, ip
 80022ea:	6001      	str	r1, [r0, #0]
 80022ec:	6042      	str	r2, [r0, #4]
 80022ee:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2240      	movs	r2, #64	; 0x40
 80022f4:	2101      	movs	r1, #1
 80022f6:	5299      	strh	r1, [r3, r2]

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	2100      	movs	r1, #0
 80022fe:	5299      	strh	r1, [r3, r2]

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2244      	movs	r2, #68	; 0x44
 8002304:	2100      	movs	r1, #0
 8002306:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2250      	movs	r2, #80	; 0x50
 800230c:	2100      	movs	r1, #0
 800230e:	5299      	strh	r1, [r3, r2]

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff ffa0 	bl	8002258 <USB_EnableGlobalInt>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b002      	add	sp, #8
 8002320:	bc04      	pop	{r2}
 8002322:	4690      	mov	r8, r2
 8002324:	bc90      	pop	{r4, r7}
 8002326:	bc08      	pop	{r3}
 8002328:	b004      	add	sp, #16
 800232a:	4718      	bx	r3

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	2600      	movs	r6, #0
 8002330:	4d0c      	ldr	r5, [pc, #48]	; (8002364 <__libc_init_array+0x38>)
 8002332:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <__libc_init_array+0x3c>)
 8002334:	1b64      	subs	r4, r4, r5
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	42a6      	cmp	r6, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	2600      	movs	r6, #0
 800233e:	f000 f821 	bl	8002384 <_init>
 8002342:	4d0a      	ldr	r5, [pc, #40]	; (800236c <__libc_init_array+0x40>)
 8002344:	4c0a      	ldr	r4, [pc, #40]	; (8002370 <__libc_init_array+0x44>)
 8002346:	1b64      	subs	r4, r4, r5
 8002348:	10a4      	asrs	r4, r4, #2
 800234a:	42a6      	cmp	r6, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	00b3      	lsls	r3, r6, #2
 8002352:	58eb      	ldr	r3, [r5, r3]
 8002354:	4798      	blx	r3
 8002356:	3601      	adds	r6, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	00b3      	lsls	r3, r6, #2
 800235c:	58eb      	ldr	r3, [r5, r3]
 800235e:	4798      	blx	r3
 8002360:	3601      	adds	r6, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	080023cc 	.word	0x080023cc
 8002368:	080023cc 	.word	0x080023cc
 800236c:	080023cc 	.word	0x080023cc
 8002370:	080023d0 	.word	0x080023d0

08002374 <memset>:
 8002374:	0003      	movs	r3, r0
 8002376:	1812      	adds	r2, r2, r0
 8002378:	4293      	cmp	r3, r2
 800237a:	d100      	bne.n	800237e <memset+0xa>
 800237c:	4770      	bx	lr
 800237e:	7019      	strb	r1, [r3, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	e7f9      	b.n	8002378 <memset+0x4>

08002384 <_init>:
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238a:	bc08      	pop	{r3}
 800238c:	469e      	mov	lr, r3
 800238e:	4770      	bx	lr

08002390 <_fini>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr
